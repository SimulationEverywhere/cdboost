<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.1//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<library dirname="simulation" id="simulation"
         last-revision="$Date: 2015-02-09$" name="Simulation"
         url="cdboost.gforge.inria.fr">
  <title><libraryname
  last-revision="2015-02-09">Simulation</libraryname></title>

  <libraryinfo>
    <author>
      <firstname>Damián</firstname>

      <surname>Vicino</surname>
    </author>

    <copyright>
      <year>2013-2015</year>

      <holder>Carleton University</holder>

      <holder>Universite de Nice Sophia Antipolis</holder>
    </copyright>

    <legalnotice>
      <para><ulink
      url="https://gforge.inria.fr/docman/view.php/6779/10332/BSD-LICENSE.txt">BSD
      License</ulink></para>
    </legalnotice>

    <librarypurpose>Multi formalism simulation</librarypurpose>

    <librarycategory name="">Formal Methods</librarycategory>
  </libraryinfo>

  <section id="simulation.introduction">
    <title id="libraryname.introduction">Introduction</title>

    <itemizedlist>
      <listitem>
        <para>This libraryWhat the library is does.</para>
      </listitem>

      <listitem>
        <para>What problems will this library solve?</para>
      </listitem>

      <listitem>
        <para>Perhaps some short examples to support the above</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Motivation</title>

      <para>Discrete-Event Simulation (DES) is a technique in which the
      simulation engine plays a history following a chronology of events. The
      technique is called ”discrete-event” because the set of states the model
      can adopt is discrete and processing each event of the chronology takes
      place at discrete points in a continuous time-line (events).</para>

      <para>To improve collaboration, sharing, and reuse about the models and
      simulations developed, several modelling formalisms had been proposed.
      Most of them can be grouped in families that use similar algorithms and
      data structures with slight differences. </para>

      <para>For the most popular formalisms, there are several implementations
      developed in various languages and platforms in the last few
      decades.</para>

      <para>Since some formalisms are more suitable for specific fields than
      others, in any multi-disciplinary work multiple formalisms are used and
      need to be combined in some way to obtain a simulation. To do so, the
      models need to be combined into a larger model using a common ground
      formalism. For this purpose multi-formalism modeling and simulation is
      used. For doing so, a common model ans simulation formalism needs to be
      used. </para>

      <para>The Discrete-Event System Specification (DEVS) family of formalism
      has being proven to be expressive enough to cover every other DES
      formalisms, and it also can be used to approximate continuous systems in
      some cases.</para>
    </section>

    <section>
      <title>Goals</title>

      <para><itemizedlist>
          <listitem>
            <para>Provide basic datatypes commonly used in DES M&amp;S.
            </para>

            <para>i.e. Future Event List, Time, etc.</para>
          </listitem>
        </itemizedlist><itemizedlist>
          <listitem>
            <para>Provide definition of Models from multiple
            formalisms.</para>

            <para>i.e. DEVS, Parallel DEVS, Timed Automatas, etc.</para>
          </listitem>
        </itemizedlist><itemizedlist>
          <listitem>
            <para>Provide simulation support for DEVS family of formalisms to
            be used as the base for multi-formalism.</para>
          </listitem>
        </itemizedlist><itemizedlist>
          <listitem>
            <para>Provide adaptors for the formalisms to be able to be
            simulated by the DEVS algorithms.</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>Current state</title>

      <para>Parallel DEVS (PDEVS) modeling and simulation components
      implemented.</para>

      <para>Examples for PDEVS implemented.</para>

      <para>PDEVS test suite implemented.</para>
    </section>
  </section>

  <section id="simulation.tutorial">
    <title id="libraryname.tutorial">Tutorial</title>

    <para>For our first example we will define a simple Generator model in
    PDEVS formalism.</para>

    <para>We chose the Generator model as the first to explain because of its
    simplicity. This model defined in every DEVS M&amp;S book in detail and it
    one of the easiest expresable models in DES.</para>

    <para>The Generator is a periodic model that generates an output after a
    fixed amount of time.</para>

    <para>This model can be used to represent the ticking of a clock, or a
    drop from a leak in a faucet.</para>

    <para>For our example, the Generator will output a "tick" every
    second.</para>

    <para>In PDEVS, models can be defined as atomic when they describe a
    behavior or coupled when they define a composition and interaction between
    other models. </para>

    <para>In the case of Generator we will define an PDEVS atomic
    model.</para>

    <programlisting>class generator_second : public atomic&lt;double, std::string&gt; // Parameters are time and message representations.
{
public:
    explicit generator_second() noexcept {} // Nothing to do on construction.

    void internal() noexcept {} // The state never changes, so internal transitions do not need to change it.

    double advance() const noexcept { return 1; } // The time until next output when an output was generated is always 1.

    std::vector&lt;std::string&gt; out() const noexcept { 
        return std::vector&lt;std::string&gt;(std::string("tick")); // It always outputs "tick".
    } 
 
    void external(const std::vector&lt;MSG&gt;&amp; mb, const TIME&amp; t) noexcept { 
        assert(false &amp;&amp; "No external input is expected by this model"); // This model receives no input from outside.
    }

    void confluence(const std::vector&lt;MSG&gt;&amp; mb, const TIME&amp; t)  noexcept  { 
        assert(false &amp;&amp; "No external input is expected by this model"); // This model receives no input from outside.
    }

};</programlisting>

    <para>Once we have our model, we may want to compose it with others to
    describe more complex behavior.</para>

    <para>For example, if we want to model the ticks of a clock, we have to
    model the 3 needles, one ticking every second, one every 60 seconds and
    the last one every 3600 seconds and then compose the three as a single
    model.</para>

    <para>For doing so, we define a PDEVS coupled model.</para>

    <programlisting>cout &lt;&lt; "Defining atomic models" &lt;&lt; endl;
auto second = make_atomic_ptr&lt;generator_second&gt;(); // A generator ticking every second
auto minute = make_atomic_ptr&lt;generator_minute&gt;(); // A generator ticking every minute
auto hour = make_atomic_ptr&lt;generator_hour&gt;(); // A generator ticking every hour

cout &lt;&lt; "Coupling the needles models into a clock model" &lt;&lt; endl;
shared_ptr&lt;coupled&lt;double, string&gt;&gt; clock( 
    new coupled&lt;double, string&gt;{
        {second, minute, hour}, // The models being composed.
        {}, // The models connected to the external input of the coupled model. 
        {}, // The interconnections between models.
        {second, minute, hour} // The models connected to the output of the coupled model.
    }
);</programlisting>

    <para>Once we have the coupled model, we only need to run the simulation
    using the runner.</para>

    <programlisting>double initial_time{0};
runner&lt;double, string&gt; r(clock, // The model to simulate.
                         0, // The initial time of the simulation.
                         cout, // A stream to send the output of the simulation.
                         [](ostream&amp; os, string m){ os &lt;&lt; m;} // A function processing the messages to generate output.
                        );
    std::cout &lt;&lt; "Starting 2 hours of simulation" &lt;&lt; std::endl;

    double next = r.runUntil(7200); // The function returns the time of the next expected output.</programlisting>

    <para>A more detailed implementation of the clock simulation can be found
    in the examples folder.</para>
  </section>

  <section id="simulation.notes">
    <title id="libraryname.notes">Notes</title>

    <para>Simulation is a headers only library with few requirements:</para>

    <para><itemizedlist>
        <listitem>
          <para>Building of examples and test can be done running b2.</para>
        </listitem>
      </itemizedlist></para>

    <itemizedlist>
      <listitem>
        <para>Models require two template paramenters, they define Time and a
        Message representation.</para>

        <para>In a single simulation, every model needs to use the same Time
        and Message representation. </para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>On cases where different message types are needed, the message
        type boost::any is suggested.</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>Library requires C++11. </para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>When used in Windows, "vector" based contructors is required in
        place of using initialization-lists because a lack of support in
        current compiler. These alternative constructors are provided.</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>To introduce list of events to the model, a basic_model called
        input_model can be used to parse form std::istreams and sending the
        events to other models. (An example can be found in
        example/mina-custom-event-list.cpp</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>Examples have some extra dependencies, including
        "program_options", "any", "rational".</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>Tests use boost::test and require the compiled version to run,
        also they depend in "any" and "rational".</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="simulation.concepts">
    <title id="libraryname.concepts">Concepts</title>

    <para>The classes are grouped in three categories, modelling, simulation
    and basic models, each of these 3 are defined for every formalism.</para>

    <section>
      <title>Modelling classes</title>

      <para>An atomic PDEVS is specified as follows [2]: M = {X, Y, S, δext,
      δint, δcon, λ, ta} where X is the set of input events, S the set of
      sequential states, Y is the set of output events, δext is the external
      transition function, δint is the internal transition function, δcon is
      the confluent function, λ is the output function and ta is the time
      advance function. In this specification, the confluent transition
      function s’= δconf (s,e,x) computes the next state using the current
      state s, the elapsed time e and the input events x when the internal and
      external events occur simultaneously. The rest of the PDEVS
      specification follows the Classic DEVS specification [1].</para>

      <para>A coupled PDEVS is specified as follows [2]: DN = {X, Y, D,
      {Mi},{Ii},{Zi,j}} where X is the set of input events, Y is the set of
      output events, D is the set of the component names, Mi is the DEVS
      system of component name i є D, Ii is the influences of i for each i є D
      and Zi,j defines the i-to-j output translation for each j in Ii. The
      whole DN specification follows the Classic coupled DEVS specification
      except for the Select function. PDEVS has two established simulation
      algorithm, one that doesn’t have ports by Chow [2] and one that supports
      ports by Zeigler [1].</para>
    </section>

    <section>
      <title>Simulation classes</title>

      <para>Abstract simulation algorithms were defined by Chow [2] based in
      those provided by Zeigler for classic DEVS[1]. These algorithms are
      classified as Simulator algorithms when they simulate an atomic model,
      and Coordinator algorithms for the simulation of coupled models. We
      mantained this distinction when there is no significant penalty in the
      performance.</para>

      <para>We also define a runner to handle the global details of the
      simulation and create the necessary Simulators, Coordinators and model
      transformations at the time of running th simulation. The runner details
      include deciding if running in debuging mode, how to handle the output,
      and when to stop the simulation.</para>
    </section>
  </section>

  <section id="simulation.types">
    <title id="libraryname.types">Types</title>

    <section>
      <title>model</title>

      <para>This type is the base class for every formalism's model
      classes.</para>
    </section>

    <section>
      <title>pdevs::atomic</title>

      <para>This type defines the atomic model for PDEVS formalism.</para>

      <para>It requires the five functions defined in the formalism: internal
      transition, external transition, confluent transition, time advance and
      output. </para>

      <para>Functions receive and send bags of messages, that momentarily, are
      defined as std::vectors.</para>
    </section>

    <section>
      <title>pdevs::coupled</title>

      <para>This type defines the coupled models for PDEVS formalism.</para>

      <para>Two flavors are implemented, common coupled and flatened coupled.
      The difference between them is how the internal representation is
      handled. They are equivalent in the formalism, but they may have
      different performance depending the model being simulated. Deciding
      which to use is the user responsability.</para>

      <para>For coupling, shared pointers to models are used, first to define
      the list of models and then to define the relation between them.</para>
    </section>

    <section>
      <title>pdevs::coordinator</title>

      <para>This type runs PDEVS models. At the time the coupled model is
      assigned to a coordinator it creates other coordinators and simulators
      to handle the submodels of the coupled model and then it coordinates the
      advance of all these coordinators and simulators to provide its own
      outputs. The implementation of the simulation algorithms is sequential
      and non-optimistic. There is never a rollback. Each call to
      advanceSimulation advances internally a step and outputs are collected
      in separate method. </para>

      <para>The Future Event List structure is a template parameter and any
      type compatible with priority_queue interface is accepted. Alternatively
      a roundrobin pooling can be used by choosing nullqueue FEL.</para>
    </section>

    <section>
      <title>pdevs::runner</title>

      <para>This type creates a simulation, it handles the creation of
      coordinators, the advance of the simulation and the processing of the
      output.</para>

      <para>The runner is in charge of setting up the coordinators and
      simulators, the initial conditions, the ending conditions, the loggers.
      It also runs the simulation, processes the output messages and displays
      the results.</para>
    </section>

    <section>
      <title>Basic models</title>

      <para>For basic model templates are provided in the pdevs::basic_models
      namespace.</para>

      <section>
        <title>generator</title>

        <para>This model was described in the Tutorial, it outputs a message
        periodicly every X time. The constructor allows to define the message
        to be output and the period of repeating the output.</para>
      </section>

      <section>
        <title>infinite_counter</title>

        <para>This model counts how many messages different than the number
        zero were received until a zero is received. When a message with a
        zero is received, it outputs the count value and resets the
        counter.</para>
      </section>

      <section>
        <title>processor</title>

        <para>This model has an internal queue of jobs, each job takes a fixed
        ammount of time to be executed and dequeued.</para>

        <para>A message received is a job and it is processed as soon as it
        gets first in the queue. The queue follows FIFO policy.</para>
      </section>

      <section>
        <title>istream (this one needs a new name)</title>

        <para>An istream model is a model that parses a history of events from
        an istream and outputs them accordingly.</para>

        <para>The model receives 4 template parameters, the first 2 are time
        and message as always, the following 2 are the datatypes to be
        extracted from the istream that will be converted to TIme and Message
        afterward.</para>

        <para>For example, the list of events can be pairs of integers, while
        the time and message could be double and string.</para>

        <para>The constructor receives a lambda function to process each line
        of istream and transform it in a Time and Message to be output.</para>
      </section>
    </section>
  </section>

  <section id="simulation.functions">
    <title>Functions</title>

    <para>A helper functions is defined for creating shared pointers to atomic
    models in convenience.hpp as follows:</para>

    <programlisting>//create a shared pointer to a pdevs::atomic model
template&lt;class MODEL, typename... Args&gt;
std::shared_ptr&lt;pdevs::atomic&lt;typename MODEL::time_type, typename MODEL::message_type&gt;&gt; make_atomic_ptr(Args... args) noexcept {
    return std::make_shared&lt;MODEL&gt;(std::forward&lt;Args&gt;(args)...);
}

}
}</programlisting>

    <para/>
  </section>

  <section id="simulation.rationale">
    <title id="libraryname.rationale">Rationale</title>

    <qandaset>
      <qandaentry>
        <question>
          <para/>
        </question>

        <answer>
          <para/>
        </answer>
      </qandaentry>
    </qandaset>
  </section>

  <section id="simulation.changelog">
    <title id="libraryname.changelog">Change Log</title>

    <para/>
  </section>

  <section id="simulation.references">
    <title id="libraryname.references">References</title>

    <para>Some references about PDEVS and DES.</para>

    <itemizedlist>
      <listitem>
        <para>[1] B. P. Zeigler, H. Praehofer and T. G. Kim, Theory of
        modeling and simulation: integrating discrete event and continuous
        complex dynamic systems, Academic press, 2000. </para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>[2] A. C. Chow, “Parallel DEVS: A parallel, hierarchical,
        modular modeling formalism and its distributed simulator,”
        TRANSACTIONS of the Society for Computer Simulation, vol. 13, no. 2,
        pp. 55-68, 1996. </para>
      </listitem>
    </itemizedlist>

    <para><itemizedlist>
        <listitem>
          <para>T. Schwatinski and T. Pawletta, “An advanced simulation
          approach for parallel DEVS with ports,” in Proceedings of the 2010
          Spring Simulation Multiconference, 2010.</para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para>A. Muzy and J. J. Nutaro, “Algorithms for efficient
          implementations of the DEVS &amp; DSDEVS abstract simulator,” in 1st
          Open International Conference on Modeling &amp; Simulation (OICMS),
          2005. </para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para>J. Himmelspach and A. M. Uhrmacher, “Sequential processing of
          PDEVS models,” in Proceedings of the 3rd EMSS, 2006.</para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para>E. Glinsky and G. Wainer, “DEVStone: a benchmarking technique
          for studying performance of DEVS modeling and simulation
          environments,” in Distributed Simulation and Real-Time Applications,
          2005. DS-RT 2005 Proceedings. Ninth IEEE International Symposium on,
          2005. </para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para>M. Gutierrez-Alcaraz and G. Wainer, “Experiences with the
          DEVStone benchmark,” in Proceedings of the 2008 Spring simulation
          multiconference, 2008.</para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para>K. Kim, W. Kang, B. Sagong and H. Seo, “Efficient distributed
          simulation of hierarchical DEVS models: transforming model structure
          into a non-hierarchical one,” in Simulation Symposium, 2000.(SS
          2000) Proceedings. 33rd Annual, 2000.</para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para>E. A. Lee, "The problem with threads," Computer, vol. 39, no.
          5, pp. 33-42, 2006. </para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para>R. Franceschini, P.-A. Bisgambiglia, L. Touraille, P.
          Bisgambiglia, D. Hill, R. Neykova and N. Ng, "A survey of modelling
          and simulation software frameworks using Discrete Event System
          Specification," in 2014 Imperial College Computing Student Workshop,
          2014.</para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para>J. J. Nutaro, Building software for simulation: theory and
          algorithms, with applications in C++, John Wiley &amp; Sons, 2011.
          [13] D. Vicino, O. Dalle and G. Wainer, "A data type for discretized
          time representation in DEVS," in Proceedings of the 7th
          International ICST Conference on Simulation Tools and Techniques,
          2014.</para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para>J. Himmelspach and A. M. Uhrmacher, "The event queue problem
          and PDevs," in Proceedings of the 2007 spring simulation
          multiconference-Volume 2, 2007. </para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para>B. Karlsson, Beyond the C++ standard library: an introduction
          to boost, Pearson Education, 2005. </para>
        </listitem>
      </itemizedlist></para>
  </section>
</library>
